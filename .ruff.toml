# Builtins that are allowed to be used without being imported.
builtins = ["_", "__", "___"]

# Files and directories to exclude from linting.
extend-exclude = [
    ".gradio",
    ".mypy_cache",
    ".pytest_cache",
    "data",
    "**/__pycache__",
    "**/.ipynb_checkpoints",
    "**/.mypy_cache",
    "**/.pytest_cache",
    "**/.tox",
    "**/.venv",
    "**/build",
    "**/dist",
    "**/node_modules",
]

# Code style settings
indent-width = 4
line-length  = 88

# Output format for linting results
output-format = "concise"

# Minimum required Ruff version
required-version = ">=0.11.2"

[lint]
# Enable all rules by default and selectively disable
select = ["ALL"]

# Rules to ignore
ignore = [
    "A001",    # Variable is shadowing a Python builtin
    "A002",    # Argument name is shadowing a Python builtin
    "A003",    # Class attribute is shadowing a Python builtin
    "ANN101",  # Missing type annotation for self in method
    "ANN102",  # Missing type annotation for cls in classmethod
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
    "ARG001",  # Unused function argument (handled by F841)
    "ARG002",  # Unused method argument (handled by F841)
    "COM812",  # Missing trailing comma
    "D1",      # All pydocstyle checks
    "E501",    # Line too long (handled by line-length)
    "ERA001",  # Commented out code
    "FIX002",  # Line contains TODO, FIXME, etc.
    "N999",    # Invalid module name
    "PD901",   # DataFrame variable name doesn't follow naming rules
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison
    "RET504",  # Unnecessary variable assignment before return statement
    "S101",    # Use of assert detected
    "S603",    # subprocess call with shell=True
    "SLF001",  # Private member accessed
    "TD002",   # Missing author in TODO
    "TD003",   # Missing link in TODO
    "UP006",   # Use PEP 585 builtin types
    "UP007",   # Use X | Y for type annotations
    "UP035",   # Unnecessary iterable allocation
    "UP040",   # Non-PEP 695 type alias
    "PLC0415", # import-outside-top-level
    "UP047",   # non-pep695-generic-function
]

# Allow potentially confusing unicode characters (e.g., α, β, etc.)
allowed-confusables = ["α", "β"]

# Allow unused variables when they start with an underscore
dummy-variable-rgx = "^((kw)?args|_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Per-file ignores
[lint.per-file-ignores]
"__init__.py" = [
    "D104", # Missing docstring in public package
    "F401", # Imported but unused
    "F403", # Undefined name from wildcard import
]

"**/tests/**/*.py" = [
    "S101",    # Use of assert in tests is fine
    "ARG001",  # Unused argument in test fixtures
    "ARG002",  # Unused argument in test methods
    "D100",    # Missing docstring in public module
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D104",    # Missing docstring in public package
    "D105",    # Missing docstring in magic method
    "D107",    # Missing docstring in __init__
    "D202",    # No blank lines allowed after function docstring
    "D401",    # First line should be in imperative mood
    "E501",    # Line too long
    "PLR2004", # Magic value used in comparison
]

"**/scripts/*.py" = [
    "N999", # Invalid module name (scripts often have dashes)
    "T201", # Print statement in scripts is fine
]

"**/scripts/**/*.py" = [
    "ANN401", # Any type in scripts is fine
    "BLE001", # Blind except in scripts is fine
    "E731",   # Lambda assignment in scripts is fine
    "EXE003", # Shebang missing in scripts is fine
    "N815",   # Mixed case variable in class scope is fine in scripts
]

"docs/conf.py" = [
    "E501", # line-too-long
]

"*.ipynb" = [
    "ANN001",  # missing-type-function-argument
    "B018",    # useless-expression
    "BLE001",  # blind-except
    "C901",    # complex-structure
    "E501",    # line-too-long
    "F401",    # unused-import
    "PLR0912", # too-many-branches
    "PLR0915", # too-many-statements
    "RUF001",  # ambiguous-unicode-character-string
    "RUF003",  # ambiguous-unicode-character-comment
    "S101",    # use of assert
    "S311",    # suspicious-non-cryptographic-random-usage
    "T201",    # use of print
    "W505",    # doc-line-too-long
]

# Plugin configurations
[lint.flake8-pytest-style]
parametrize-values-type = "tuple"

[lint.flake8-type-checking]
# Add quotes around type annotations, if doing so would allow
# an import to be moved into a type-checking block.
quote-annotations = false

[lint.isort]
case-sensitive          = true
combine-as-imports      = true
force-to-top            = ["src"]
split-on-trailing-comma = false

[lint.mccabe]
max-complexity = 13

[lint.pycodestyle]
max-doc-length = 88

[lint.pydocstyle]
convention = "google"

[lint.pylint]
max-args            = 7
max-branches        = 15
max-nested-blocks   = 7
max-positional-args = 7
max-returns         = 7

[format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
# docstring-code-line-length = "dynamic"
